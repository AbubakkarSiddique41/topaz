# compstmt: line* statement? [LINE_END]?;
# unfortunately you need to inline this anywhere you want it because ebnf parse
# doesn't support epsilon productions.

IGNORE: "[ ]";
LINE_END: "[\n;]";

NUMBER: "[0-9]+(\.[0-9]+)?";
STRING: "\\"[^\\\\"]*\\"";
IDENTIFIER: "[a-zA-Z_][a-zA-Z0-9_]*";

DOT: "\.";
LT: "<";
LPAREN: "\(";
RPAREN: "\)";

CMP_OPER: "(!=)|(==)|(<=)|(>=)|>";
SHIFT_OPER: "<<";
ADD_OPER: "[+-]";
MUL_OPER: "[*]";

main: line* statement? [LINE_END]? [EOF];

line: statement? [LINE_END];

statement: "return" expr |
            block |
            expr;

block: real_send "do" (["|"] arglist? ["|"])? line* statement? [LINE_END]? "end";

expr: assignment |
      yield |
      arg;

assignment: lhs "=" rhs;

lhs: varname |
     send DOT IDENTIFIER;

rhs: arg;

yield: ["yield"] args?;

arg: comparison;

cmp_oper: <CMP_OPER> | <LT>;

comparison: shiftive cmp_oper comparison | <shiftive>;
shiftive: additive SHIFT_OPER shiftive | <additive>;
additive: multitive ADD_OPER additive | <multitive>;
multitive: send MUL_OPER multitive | <send>;

send: real_send |
      <primary>;

real_send: primary trailers |
           IDENTIFIER send_args |
           IDENTIFIER [LPAREN] send_args? [RPAREN];

trailers: trailer >trailers< | trailer;

trailer: attribute | subscript;
attribute: [DOT] operation [LPAREN] send_args? [RPAREN] |
           [DOT] operation send_args?;
subscript: ["["] arg ["]"];

primary: LPAREN expr RPAREN |
         "[" args? "]" |
         "if" expr then line* statement? [LINE_END]? "end" |
         "while" expr do line* statement? [LINE_END]? "end" |
         "def" IDENTIFIER argdecl line* statement? [LINE_END]? "end" |
         "class" IDENTIFIER (LT IDENTIFIER)? [LINE_END] line* statement? [LINE_END]? "end" |
         varname |
         literal;

then: [LINE_END] |
      "then" |
      [LINE_END] "then";

do: [LINE_END] |
    "do" |
    [LINE_END] "do";

argdecl: [LPAREN] arglist? [RPAREN] |
         arglist? [LINE_END];

arglist: IDENTIFIER [","] >arglist< | IDENTIFIER;

operation: IDENTIFIER | "class";

send_args: args;

args: arg [","] >args< | arg;

varname: IDENTIFIER |
         "@" IDENTIFIER;

literal: NUMBER | symbol | STRING;

symbol: [":"] IDENTIFIER;